<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.zerock.myapp.mapper.BoardMapper">

    <!-- 게시판 목록 -->
    <select id="findBoardList" resultType="org.zerock.myapp.domain.BoardAndReplyCntVO">
        SELECT
        Board.*,
        Movies.title AS movie_title,
        board_kategories.name AS kategorie_name,
        Member.nickname,
        COALESCE(COUNT(Board_reply.id), 0) AS reply_count
        FROM
        Board
        LEFT JOIN Movies ON Board.movie_id = Movies.id
        LEFT JOIN board_kategories ON Board.kategorie_id = board_kategories.id
        LEFT JOIN Member ON Board.member_id = Member.id
        LEFT JOIN Board_reply ON Board.id = Board_reply.board_id
        GROUP BY Board.id, Movies.title, board_kategories.name, Member.nickname
        ORDER BY Board.id DESC
        OFFSET #{offset} ROW FETCH NEXT #{perPage} ROW ONLY
    </select>

    <!-- 게시판 검색에 따른 목록 -->
    <select id="BoardSearchList" resultType="org.zerock.myapp.domain.BoardAndReplyCntVO">
        SELECT
        Board.*,
        Movies.title AS movie_title,
        board_kategories.name AS kategorie_name,
        Member.nickname,
        COALESCE(COUNT(Board_reply.id), 0) AS reply_count
        FROM
        Board
        LEFT JOIN Movies ON Board.movie_id = Movies.id
        LEFT JOIN board_kategories ON Board.kategorie_id = board_kategories.id
        LEFT JOIN Member ON Board.member_id = Member.id
        LEFT JOIN Board_reply ON Board.id = Board_reply.board_id
        WHERE
        <if test="category == 'title'">
            LOWER(Board.title) LIKE '%'||LOWER(#{query})||'%'
        </if>
        <if test="category == 'content'">
            LOWER(Board.content) LIKE '%'||LOWER(#{query})||'%'
        </if>
        <if test="category == 'movieTitle'">
            LOWER(Movies.title) LIKE '%'||LOWER(#{query})||'%'
        </if>
        GROUP BY Board.id, Movies.title, board_kategories.name, Member.nickname
        ORDER BY Board.id DESC
        OFFSET #{offset} ROW FETCH NEXT #{perPage} ROW ONLY
    </select>

    <!-- 게시판 수 조회 -->
    <select id="totalBoardListCnt" resultType="Integer">
        SELECT
        COUNT(id)
        FROM
        Board
    </select>

    <!-- 게시판 검색된 게시글 수 조회 -->
    <select id="boardSearchListCnt" resultType="Integer">
        SELECT
        COUNT(DISTINCT Board.id)
        FROM
        Board
        LEFT JOIN Movies ON Board.movie_id = Movies.id
        WHERE
        <if test="category == 'title'">
            LOWER(Board.title) LIKE '%' || LOWER(#{query}) || '%'
        </if>
        <if test="category == 'content'">
            LOWER(Board.content) LIKE '%' || LOWER(#{query}) || '%'
        </if>
        <if test="category == 'movieTitle'">
            LOWER(Movies.title) LIKE '%' || LOWER(#{query}) || '%'
        </if>
    </select>

    <!-- 게시글 작성 -->
    <insert id="postWriting">
        INSERT INTO Board (title, content, kategorie_id, member_id
        <choose>
            <when test="movieId != null">
                , movie_id
            </when>
        </choose>)
        VALUES (#{title}, #{content}, #{kategorieId}, #{memberId}
        <choose>
            <when test="movieId != null">
                , #{movieId}
            </when>
        </choose>)
    </insert>

    <!-- 게시글 수정 -->
    <update id="updateBoard">
        UPDATE Board
        SET title = #{title},
        content = #{content},
        updated_at = CURRENT_TIMESTAMP,
        kategorie_id = #{kategorieId},
        <if test="movieId != null">
            movie_id = #{movieId},
        </if>
        member_id = #{memberId}
        WHERE id = #{id}
    </update>

    <!-- 게시판 카테고리 목록 -->
    <select id="findBoardKategoriesList" resultType="org.zerock.myapp.domain.BoardKategoriesVO">
        SELECT
        *
        FROM
        board_kategories
    </select>

    <!-- 영화 검색 목록 -->
    <select id="searchMovies" resultType="org.zerock.myapp.domain.MovieVO">
        SELECT DISTINCT *
        FROM movies
        WHERE
        (LOWER(title)  LIKE '%' || LOWER(#{searchInput}) || '%'
        OR LOWER(original_title) LIKE '%' || LOWER(#{searchInput}) || '%')
        ORDER BY
        release_date DESC
    </select>

    <!-- 특정 게시글 조회 -->
    <select id="findBoard" resultType="org.zerock.myapp.domain.BoardVO">
        SELECT
        Board.*,
        Movies.title AS movie_title,
        board_kategories.name AS kategorie_name,
        Member.nickname
        FROM
        Board
        LEFT JOIN Movies ON Board.movie_id = Movies.id
        LEFT JOIN board_kategories ON Board.kategorie_id = board_kategories.id
        LEFT JOIN Member ON Board.member_id = Member.id
        WHERE board.id = #{id}
        ORDER BY board.id DESC
    </select>

    <!-- 특정 게시글 조회시 조회수 1씩 증가 -->
    <update id="viewCountUp">
        UPDATE Board
        SET view_count = view_count + 1
        WHERE id = #{id}
    </update>

    <!-- 사용자가 해당 게시글에 좋아요를 눌렀는지 확인 -->
    <select id="likescheck" resultType="Integer">
        SELECT COUNT(id) FROM Likes WHERE board_id = #{boardId} AND member_id = #{memberId}
    </select>

    <!-- 이미 좋아요를 눌렀다면, 좋아요 취소 -->
    <delete id="cancelLikes">
        DELETE FROM Likes WHERE board_id = #{boardId} AND member_id = #{memberId}
    </delete>

    <!-- 이미 좋아요를 눌렀다면, 좋아요 취소 -->
    <update id="LikesCountDown">
        UPDATE Board SET favorites = favorites - 1 WHERE id = #{boardId}
    </update>

    <!-- 좋아요를 누르지 않았다면, 좋아요 추가 -->
    <insert id="addLikes">
        INSERT INTO Likes (board_id, member_id) VALUES (#{boardId}, #{memberId})
    </insert>

    <!-- 좋아요를 누르지 않았다면, 좋아요 추가 -->
    <update id="LikesCountUp">
        UPDATE Board SET favorites = favorites + 1 WHERE id = #{boardId}
    </update>

    <!-- 좋아요 수 조회 -->
    <select id="getLikeCount" resultType="Integer">
        SELECT COUNT(id) FROM Likes WHERE board_id = #{boardId}
    </select>

    <!-- 특정 게시글 삭제 -->
    <delete id="deleteAPost">
        DELETE FROM board WHERE id = #{id}
    </delete>

    <!-- 신고 카테고리 목록 -->
    <select id="findReportKategoriesList" resultType="org.zerock.myapp.domain.ReportKategoriesVO">
        SELECT
        *
        FROM
        report_kategories
    </select>

    <!-- 신고글 작성 -->
    <insert id="writingAReport">
        INSERT INTO reportBoards (content, menu, board_id, reporter_id)
        VALUES (#{content}, #{kategorieId}, #{boardId}, #{reporterId});
    </insert>

    <!-- 신고댓글 작성 -->
    <insert id="reportwriteAComment">
        INSERT INTO reportreply (report_content, menu, reply_id, reporter_id)
        VALUES (#{content}, #{kategorieId}, #{replyId}, #{reporterId});
    </insert>

    <!-- 게시글에 해당하는 댓글 목록 -->
    <select id="findBoardReplyList" resultType="org.zerock.myapp.domain.BoardReplyVO">
        SELECT
        Board_reply.*,
        Member.nickname
        FROM
        Board_reply
        INNER JOIN
        Board ON Board_reply.board_id = Board.id
        INNER JOIN
        Member ON Board_reply.member_id = Member.id
        WHERE
        Board.id = #{id}
        ORDER BY
        Board_reply.id DESC
    </select>

    <!-- 게시글에 해당하는 특정 댓글 조회 -->
    <select id="findBoardReply" resultType="org.zerock.myapp.domain.BoardReplyVO">
        SELECT
        Board_reply.*,
        Member.nickname
        FROM
        Board_reply
        INNER JOIN
        Board ON Board_reply.board_id = Board.id
        INNER JOIN
        Member ON Board_reply.member_id = Member.id
        WHERE
        Board_reply.id = #{id}
        ORDER BY
        Board_reply.id DESC
    </select>

    <!-- 댓글 수정 -->
    <update id="updateBoardReply">
        UPDATE Board_reply
        SET content = #{content},
        updated_at = CURRENT_TIMESTAMP
        WHERE id = #{id};
    </update>

    <!-- 댓글 삭제 -->
    <delete id="deleteBoardReply">
        DELETE FROM Board_reply
        WHERE id = #{replyId};
    </delete>

    <!-- 댓글 작성 -->
    <insert id="insertReply">
        INSERT INTO Board_reply (content, member_id, board_id)
        VALUES (#{content}, #{memberId}, #{id})
    </insert>

</mapper>